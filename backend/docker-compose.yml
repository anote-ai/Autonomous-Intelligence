services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anote-backend
    ports:
      - "8000:5000"  # Map container's 5000 to host's 5000
    volumes:
      - ./:/app
      - ./db:/app/db
      - ./models:/app/models
      - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    environment:
      - FLASK_APP=app.py
      - TIKA_SERVER_ENDPOINT=http://tika:9998
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DD_AGENT_HOST=datadog
      - GIT_PYTHON_REFRESH=quiet
      - DD_LLMOBS_ENABLED=1
      - DD_LLMOBS_ML_APP=quickstart-app
      - DD_API_KEY=${DD_API_KEY}  # ensure this is in your .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anote-network
    shm_size: "2.44gb"
    logging:
      driver: "json-file"   # optional for local rotation
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["ddtrace-run", "python", "app.py"]



  db:
    image: mysql:8.0
    container_name: anote-db
    restart: unless-stopped
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=agents
      - MYSQL_ROOT_PASSWORD=
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - anote-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "db", "-u", "root"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  tika:
    image: apache/tika:latest
    container_name: tika-server
    restart: unless-stopped
    environment:
      - TIKA_SERVER_ENDPOINT=http://tika:9998
    ports:
      - "9998:9998"
    volumes:
      - tika-data:/data
    networks:
      - anote-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: anote-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - anote-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  datadog:
    image: gcr.io/datadoghq/agent:latest
    container_name: datadog-agent
    restart: unless-stopped
    environment:
      - DD_API_KEY=${DD_API_KEY}   # make sure .env has this
      - DD_SITE=us5.datadoghq.com
      - DD_TAGS="env:${DD_ENV}"
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CONTAINER_LABELS_AS_TAGS={"my.custom.label.color":"color"}
    ports:
      - "8125:8125/udp"   # DogStatsD
      - "8126:8126"       # APM traces
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    networks:
      - anote-network

networks:
  anote-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  tika-data:
